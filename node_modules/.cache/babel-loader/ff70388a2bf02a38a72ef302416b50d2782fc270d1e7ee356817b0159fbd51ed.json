{"ast":null,"code":"import SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\nconst clientId = '549ed9c843b04fa793266c2963395bb4';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${encodeURIComponent(redirectUri)}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = this.getAccessToken();\n    spotifyApi.setAccessToken(accessToken);\n    return spotifyApi.search(term, ['track']).then(response => {\n      return response.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    }).catch(error => {\n      console.error('Error searching Spotify:', error);\n    });\n  },\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n    const accessToken = this.getAccessToken();\n    spotifyApi.setAccessToken(accessToken);\n    let userId;\n    return spotifyApi.getMe().then(response => {\n      userId = response.id;\n      return spotifyApi.createPlaylist(userId, {\n        name\n      });\n    }).then(response => {\n      const playlistId = response.id;\n      return spotifyApi.addTracksToPlaylist(playlistId, trackURIs);\n    }).catch(error => {\n      console.error('Error saving playlist:', error);\n    });\n  }\n};\nlet accessToken;\nexport default Spotify;","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","clientId","redirectUri","Spotify","getAccessToken","accessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","encodeURIComponent","search","term","setAccessToken","then","response","tracks","items","map","track","id","name","artist","artists","album","uri","catch","error","console","savePlaylist","trackURIs","length","userId","getMe","createPlaylist","playlistId","addTracksToPlaylist"],"sources":["D:/Learnning/jamming/jammming/src/Spotify.js"],"sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nconst spotifyApi = new SpotifyWebApi();\r\nconst clientId = '549ed9c843b04fa793266c2963395bb4';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${encodeURIComponent(redirectUri)}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n  const accessToken = this.getAccessToken();\r\n  spotifyApi.setAccessToken(accessToken);\r\n\r\n  return spotifyApi\r\n    .search(term, ['track'])\r\n    .then((response) => {\r\n      return response.tracks.items.map((track) => {\r\n        return {\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        };\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error searching Spotify:', error);\r\n    });\r\n},\r\nsavePlaylist(name, trackURIs) {\r\n  if (!name || !trackURIs.length) {\r\n    return;\r\n  }\r\n\r\n  const accessToken = this.getAccessToken();\r\n  spotifyApi.setAccessToken(accessToken);\r\n  let userId;\r\n\r\n  return spotifyApi\r\n    .getMe()\r\n    .then((response) => {\r\n      userId = response.id;\r\n      return spotifyApi.createPlaylist(userId, { name });\r\n    })\r\n    .then((response) => {\r\n      const playlistId = response.id;\r\n      return spotifyApi.addTracksToPlaylist(playlistId, trackURIs);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error saving playlist:', error);\r\n    });\r\n},\r\n};\r\nlet accessToken;\r\nexport default Spotify;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}