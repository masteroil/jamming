{"ast":null,"code":"import SpotifyWebApi from'spotify-web-api-js';var spotifyApi=new SpotifyWebApi();var clientId='549ed9c843b04fa793266c2963395bb4';var redirectUri='http://localhost:3000/';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(encodeURIComponent(redirectUri));window.location=accessUrl;}},search:function search(term){var accessToken=this.getAccessToken();spotifyApi.setAccessToken(accessToken);return spotifyApi.search(term,['track']).then(function(response){return response.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});}).catch(function(error){console.error('Error searching Spotify:',error);});},savePlaylist:function savePlaylist(name,trackURIs){if(!name||!trackURIs.length){return;}var accessToken=this.getAccessToken();spotifyApi.setAccessToken(accessToken);var userId;return spotifyApi.getMe().then(function(response){userId=response.id;return spotifyApi.createPlaylist(userId,{name:name});}).then(function(response){var playlistId=response.id;return spotifyApi.addTracksToPlaylist(playlistId,trackURIs);}).catch(function(error){console.error('Error saving playlist:',error);});}};var accessToken;export default Spotify;","map":{"version":3,"names":["SpotifyWebApi","spotifyApi","clientId","redirectUri","Spotify","getAccessToken","accessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","encodeURIComponent","search","term","setAccessToken","then","response","tracks","items","map","track","id","name","artist","artists","album","uri","catch","error","console","savePlaylist","trackURIs","length","userId","getMe","createPlaylist","playlistId","addTracksToPlaylist"],"sources":["D:/Learnning/jamming/jammming/src/Spotify.js"],"sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js';\r\n\r\nconst spotifyApi = new SpotifyWebApi();\r\nconst clientId = '549ed9c843b04fa793266c2963395bb4';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${encodeURIComponent(redirectUri)}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n  const accessToken = this.getAccessToken();\r\n  spotifyApi.setAccessToken(accessToken);\r\n\r\n  return spotifyApi\r\n    .search(term, ['track'])\r\n    .then((response) => {\r\n      return response.tracks.items.map((track) => {\r\n        return {\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        };\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error searching Spotify:', error);\r\n    });\r\n},\r\nsavePlaylist(name, trackURIs) {\r\n  if (!name || !trackURIs.length) {\r\n    return;\r\n  }\r\n\r\n  const accessToken = this.getAccessToken();\r\n  spotifyApi.setAccessToken(accessToken);\r\n  let userId;\r\n\r\n  return spotifyApi\r\n    .getMe()\r\n    .then((response) => {\r\n      userId = response.id;\r\n      return spotifyApi.createPlaylist(userId, { name });\r\n    })\r\n    .then((response) => {\r\n      const playlistId = response.id;\r\n      return spotifyApi.addTracksToPlaylist(playlistId, trackURIs);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error saving playlist:', error);\r\n    });\r\n},\r\n};\r\nlet accessToken;\r\nexport default Spotify;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}